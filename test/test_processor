#!/usr/bin/env bash
source $(dirname $0)/functions.sh
imdb_id="tt0000000"

function oneTimeSetUp() {
  sample_file="$(dirname $0)/mp4/sample.mp4"
  sample_src="https://web.archive.org/web/http://www.sample-videos.com/video/mp4/720/big_buck_bunny_720p_1mb.mp4"
  [[ -f $(dirname $0)/mp4/sample.mp4 ]] || wget ${sample_src} -O ${sample_file}
  aws s3 rm s3://${MOVIES_BUCKET}/${imdb_id}/ffprobe.txt
  aws s3 rm s3://${MOVIES_BUCKET}/${imdb_id}/kodi.strm
  aws s3 rm s3://${MOVIES_BUCKET}/${imdb_id}/omdb.json
  aws s3 rm s3://${MOVIES_BUCKET}/${imdb_id}/poster.jpg
  aws s3 cp ${sample_file} s3://${MOVIES_BUCKET}/${imdb_id}/video.mp4
  echo "Waiting for Lambda's to fire"
  sleep 5
}

function test_ffprobe() {
  assertEquals "width" "1280" "$(ffprobe ${imdb_id} | awk -F= '/^width/ { print $2 }')"
  assertEquals "height" "720" "$(ffprobe ${imdb_id} | awk -F= '/^height/ { print $2 }')"
}

function test_omdb() {
  assertEquals "title"   "Carmencita"   "$(omdb ${imdb_id}| jq .Title -r)"
  assertEquals "year"    "1894"         "$(omdb ${imdb_id}| jq .Year -r)"
}

function test_kodi_strm() {
  assertTrue 'is https'     "kodi_strm ${imdb_id} | grep ^https"
  assertTrue 'has id'       "kodi_strm ${imdb_id} | grep id=tt0000000$"
  assertTrue 'from prod'    "kodi_strm ${imdb_id} | grep \/prod\/"
}

function test_poster() {
  meta="/dev/stdin: JPEG image data, JFIF standard 1.01, resolution (DPI), density 96x96, segment length 16, baseline, precision 8, 326x475, frames 3"
  assertEquals 'is jpeg' "${meta}"  "$(poster ${imdb_id} | file -)"
}

source $(dirname $0)/shunit/src/shunit2

# vim: ft=sh
